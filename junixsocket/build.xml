<!--
    junixsocket

    Copyright (c) 2009 NewsClub, Christian KohlschÃ¼tter

    The author licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<project name="junixsocket" default="dist" basedir=".">

  <property environment="env"/>
  <property name="jdk.home" value="${env.JAVA_HOME}"/>

  <property name="app.name" value="junixsocket"/>
  <property name="app.title" value="junixsocket library"/>
  <property name="app.version" value="1.4"/>
  <property name="app.nativeversion" value="1.4"/>
  <property name="app.javaversion" value="1.5"/>
  <property name="app.dir" value="."/>

  <property name="compile.debug" value="on"/>
  <property name="compile.deprecation" value="false"/>
  <property name="compile.optimize" value="true"/>

  <property name="junit4.jar" value="/usr/share/java/junit4.jar"/>

  <condition property="isLinux">
    <equals arg1="${os.name}" arg2="Linux"/>
  </condition>

  <target name="describe">
    <information>
      <name>${app.name}</name>
      <description>${app.title}</description>
      <version>${app.version}</version>
      <vendor/>
      <api>yes</api>
      <documents>no</documents>
      <begin/>
      <end/>
      <author/>
      <state/>
    </information>
  </target>

  <property name="build.dir" value="${app.dir}/build"/>

  <property name="build.main" value="${build.dir}/main"/>
  <property name="build.demo" value="${build.dir}/demo"/>
  <property name="build.test" value="${build.dir}/test"/>
  <property name="src.main" value="${app.dir}/src/main"/>
  <property name="src.demo" value="${app.dir}/src/demo"/>
  <property name="src.test" value="${app.dir}/src/test"/>
  <property name="lib.native" value="${app.dir}/lib-native"/>
  <property name="lib.native.pkg" value="${lib.native}/org/newsclub/net/unix"/>
  <property name="dist.dir" value="${app.dir}/dist"/>
  <property name="jar.main" value="${dist.dir}/${app.name}-${app.version}.jar"/>
  <property name="jar.demo" value="${dist.dir}/${app.name}-demo-${app.version}.jar"/>
  <property name="javadoc.dir" value="${app.dir}/javadoc"/>
  <property name="distBin.tar.bz2" value="${dist.dir}/${app.name}-${app.version}-bin.tar.bz2"/>
  <property name="distSrc.tar.bz2" value="${dist.dir}/${app.name}-${app.version}-src.tar.bz2"/>

  <property name="jar.native.linux" value="${dist.dir}/${app.name}-native-linux-${app.nativeversion}.jar"/>

  <path id="classpath.main">
    <dirset dir="${build.dir}">
      <include name="main"/>
    </dirset>
  </path>
  <path id="classpath.test">
    <path refid="classpath.main"/>
    <pathelement path="${junit4.jar}"/>
    <fileset dir="${dist.dir}">
      <include name="${app.name}-native-*.jar"/>
    </fileset>
  </path>
  <target name="init">
    <delete dir="${build.dir}"/>
    <mkdir dir="${build.main}"/>
    <mkdir dir="${build.demo}"/>
    <mkdir dir="${build.test}"/>
    <mkdir dir="${lib.native}"/>
    <mkdir dir="${lib.native.pkg}"/>
    <mkdir dir="${dist.dir}"/>
  </target>

  <target name="compile" depends="init">
    <javac srcdir="${src.main}" destdir="${build.main}" encoding="UTF-8" source="${app.javaversion}" target="${app.javaversion}"
           debug="${compile.debug}" deprecation="${compile.deprecation}" optimize="${compile.optimize}"/>
    <javac srcdir="${src.test}" destdir="${build.test}" encoding="UTF-8" source="${app.javaversion}" target="${app.javaversion}"
           debug="${compile.debug}" deprecation="${compile.deprecation}" optimize="${compile.optimize}"
           classpathref="classpath.test"/>
  </target>

  <target name="javah">
    <javah classpathref="classpath.main" outputFile="${src.main}/org/newsclub/net/unix/org_newsclub_net_unix_NativeUnixSocket.h"
           verbose="yes">
      <class name="org.newsclub.net.unix.NativeUnixSocket"/>
    </javah>
  </target>

  <target name="gcc" depends="init,gcc-linux"/>

  <target name="gcc-linux" if="isLinux">
    <property name="gcc" value="/usr/bin/gcc"/>

    <echo message="jdk.home is ${jdk.home}"/>

    <antcall target="gcc-linux.32"/>
    <antcall target="gcc-linux.64"/>
  </target>

  <target name="gcc-linux.32" unless="skip32">
    <antcall target="gcc-linux.arch">
      <param name="gccArch" value="i386"/>
      <param name="gccM" value="-m32"/>
    </antcall>
  </target>
  <target name="gcc-linux.64" unless="skip64">
    <antcall target="gcc-linux.arch">
      <param name="gccArch" value="amd64"/>
      <param name="gccM" value="-m64"/>
    </antcall>
  </target>

  <target name="gcc-linux.arch">
    <property name="outLib" value="${lib.native.pkg}/libjunixsocket-linux-${app.javaversion}-${gccArch}.so"/>

    <echo message="Compiling for architecture ${gccArch} on ${os.name}"/>
    <exec executable="${gcc}" failonerror="true">
      <arg value="${gccM}"/>
      <arg value="-O2"/>
      <arg value="-Wall"/>
      <arg value="-Wl,--hash-style=both"/>
      <arg value="-shared"/>
      <arg value="-fPIC"/>
      <arg value="-I"/>
      <arg value="${jdk.home}/include/"/>
      <arg value="-I"/>
      <arg value="${jdk.home}/include/linux"/>
      <arg value="-o"/>
      <arg value="${outLib}"/>
      <arg value="${src.main}/org/newsclub/net/unix/org_newsclub_net_unix_NativeUnixSocket.c"/>
    </exec>
  </target>

  <target name="clean">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
    <mkdir dir="${javadoc.dir}"/>
    <delete>
      <fileset dir="${javadoc.dir}">
        <include name="**/*.html"/>
        <include name="**/*.gif"/>
        <include name="**/*.css"/>
        <include name="**/*.png"/>
        <exclude name="**/.svn/**"/>
      </fileset>
    </delete>
  </target>

  <target name="javadoc">
    <javadoc destdir="${javadoc.dir}" version="true" use="true" windowtitle="${app.version} API" classpathref="classpath.main">
      <packageset dir="${src.main}" defaultexcludes="yes">
        <include name="org/newsclub/**"/>
      </packageset>
    </javadoc>

    <!-- Remove some boilerplate that would otherwise clutter up the SVN repository -->
    <replaceregexp>
      <regexp pattern="&lt;!-- Generated by javadoc .*?--&gt;"/>
      <substitution expression=""/>
      <fileset dir="${javadoc.dir}">
        <include name="**/*.html"/>
      </fileset>
    </replaceregexp>
    <replaceregexp>
      <regexp pattern="&lt;META NAME=&quot;date&quot;.*?&gt;"/>
      <substitution expression="&lt;META HTTP-EQUIV=&quot;Content-Type&quot; CONTENT=&quot;text/html;charset=utf-8&quot;"/>
      <fileset dir="${javadoc.dir}">
        <include name="**/*.html"/>
      </fileset>
    </replaceregexp>
  </target>

  <target name="jars" depends="test" description="Makes a distributable jar">

    <jar destfile="${jar.main}">
      <fileset dir="${build.main}">
        <include name="**/*"/>
      </fileset>
    </jar>
  </target>

  <target name="jars-native" description="Creates jars for native libraries">
    <zip whenempty="skip" destfile="${jar.native.linux}">
      <fileset dir="${lib.native}">
        <include name="org/**/*-linux-*"/>
      </fileset>
    </zip>
  </target>

  <target name="dist" depends="clean,init,javadoc,jars,jars-native">
    <tar destfile="${distBin.tar.bz2}" compression="bzip2">
      <tarfileset dir="." prefix="${app.name}-${app.version}/">
        <include name="README.txt"/>
        <include name="NOTICE.txt"/>
        <include name="LICENSE.txt"/>
        <include name="dist/**"/>
        <include name="doc/**"/>
      </tarfileset>
    </tar>
    <tar destfile="${distSrc.tar.bz2}" compression="bzip2">
      <tarfileset dir="." prefix="${app.name}-${app.version}/">
        <include name="README.txt"/>
        <include name="NOTICE.txt"/>
        <include name="LICENSE.txt"/>
        <include name=".project"/>
        <include name=".classpath"/>
        <include name="src/**"/>
        <include name="build.xml"/>
      </tarfileset>
    </tar>
  </target>

  <target name="test" depends="init,compile,javah,gcc,jars-native" unless="skipTest">
    <echo message="JUnit reports can be found in ${build.test}"/>

    <junit printsummary="yes" haltonfailure="yes" fork="true">
      <classpath>
        <path refid="classpath.test"/>
        <pathelement path="${build.dir}/test"/>
      </classpath>
      <formatter type="plain" usefile="false"/>

      <test name="org.newsclub.net.unix.BuildInfo" todir="${build.test}">
      </test>
    </junit>

    <junit printsummary="yes" haltonfailure="yes" fork="true">
      <classpath>
        <path refid="classpath.test"/>
        <pathelement path="${build.dir}/test"/>
      </classpath>
      <formatter type="plain"/>

      <batchtest fork="yes" todir="${build.test}">
        <fileset dir="${src.test}">
          <include name="**/*Test.java"/>
        </fileset>
      </batchtest>
    </junit>
  </target>
</project>